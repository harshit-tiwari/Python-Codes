	Every Python function returns a value; if the function ever executes a return statement, it will return that value, otherwise it will
	return None, the Python null value.
	In Python, variables are never explicitly typed. Python figures out what type a variable is and keeps track of it internally.

	Python allows function arguments to have default values; if the function is called without the argument, the argument gets its default value. Furthermore, arguments can be specified in any order by using named arguments.

	Default value of the function -

    	def func(a = 10):
         		print(a)

 	func()
        Even though func has not specified any value of the argument, 10 will be taken as value of the argument. 

	once you have a single named argument, the rest of the arguments must also be named. As soon as you have a named argument, all arguments to the right of that need to be named arguments, too.

         def approximate_size(size, a_kilobyte_is_1024_bytes=True):

	approximate_size(a_kilobyte_is_1024_bytes=False, 4000)
	Fails coz one is named, other is unnamed

	Same for 
	approximate_size(size=4000, False)


	Everything between the triple quotes is the function’s docstring, which documents what the function does. A docstring, if it exists, must be the first thing defined in a function (that is, on the next line after the function declaration). You don’t technically need to give your function a docstring, but you always should. 

	Built-in modules behave just like regular modules, but their Python source code is not available, because they are not written in Python! (Like Python itself, these built-in modules are written in C.)

	A function, like everything else in Python, is an object.  Strings are objects. Lists are objects. Functions are objects. Classes are objects. Class instances are objects. Even modules are objects.
	Everything is an object in the sense that it can be assigned to a variable or passed as an argument to a function.
	Modules are first-class objects. You can pass an entire module as an argument to a function. Classes are first-class objects, and individual instances of a class are also first-class objects.

	The only delimiter in python is a colon (:) and the indentation of the code itself.
	Indentation forms a code block. A complete blank line within a code block doesn't signify end of block. A complete blank lie is completely ignored and the execution is started with the next line.
	Indentation is language requirement in Python. It is not a style of coding.

Exceptions 
Exception is an indication that something went wrong in the code execution. Exceptions are handled in python using except block.
It is not important that the exceptions should be handled in the block in which they occur. If a particular exception is not handled in its function then it traces back to its calling function and if handle condition is not found there, then to its calling function and this way up the stack.


One of Python’s built-in exceptions is ImportError, which is raised when you try to import a module and
fail. This can happen for a variety of reasons, but the simplest case is when the module doesn’t exist in your
import search path. You can use this to include optional features in your program. For example, the
chardet library provides character encoding auto-detection. Perhaps your program wants to use this library
if it exists, but continue gracefully if the user hasn’t installed it. You can do this with a try..except block.

		try:
		         import chardet
		except ImportError:
		        chardet = None

Later, you can check for the presence of the chardet module with a simple if statement:

		if chardet:
		        # do something
		else:
		       # continue anyway

The concept of Unbound Variables
We do not need to declare any variable inn python. However, we definitely need to assign some value to a variable before it is used or referenced anywhere in the program. Python never allows any variable to be referenced before it is assigned a value.

	Python does not support in-line assignment, so there’s no chance of accidentally assigning the value
       you thought you were comparing.

Data Types

Difference between Lists and Tuples-
Lists are mutable whereas tuples are immutable

	>>>a= [1,2,3,4,5]

	>>> a[2] = 10

	>>> a
	[1, 2, 10, 4, 5]

	>>> b =(1,2,3,4,5)

	>>> b[2] = 10
	Traceback (most recent call last):
	  File "<pyshell#4>", line 1, in <module>
	    b[2] =	 10
	TypeError: 'tuple' object does not support item assignment

Boolean 
The boolean values like True and False can be treated as numbers. 
	True = 1
	False = 0

	True + True = 2
	False + False = 0
	False + True = 1

Numbers 
Interview Question
How to determine the type of the variable you are dealing with
	The type() function can be used to determine the data type of a particular variable.
		>>> a = 2
		>>> type(a)
		       <class 'int'>

		>>> b = 1.2
		>>> type(b)
		      <class 'float'>

	IsInstance() can also be used.

		>>> isinstance(a, int)
		True
		>>> isinstance(a, float)
		False
		>>> isinstance(b, float)
		True
		>>> isinstance(b, int)
		False
-------------------------------------------------------------------------------------------------------------------------------------




	int + int = int
	float + float = float
	int + float = float

Type Casting 

		>>> int(12.5)
		12                This value is truncated not rounded
		>>> float(5)
		5.0

Python 2 had separate types for int and long. The int datatype was limited by sys.maxint, which varied by platform but was usually 232-1. Python 3 has just one integer type, which behaves mostly like the old long type from Python 2.

Fraction function - to reduce fractions. 
Module - fractions
Function - Fractions..................with 'F' capital
	>>> import fractions
	>>> a = fractions.Fraction(6,2)
	>>> a
	Fraction(3, 1)
	>>> type(a)
	<class 'fractions.Fraction'>

Lists
A list in Python can hold arbitrary objects and can expand dynamically as new items are added.

Slicing the lists
You can get a part of a list, called a “slice”, by specifying two indices. The return value is a new list containing all the items of the list, in order, starting with the first slice index, up to but not including the second slice index.

 		>>>a = [23,45,12,67,90]
		>>> a[1:2]
		[45]
		>>> a[1:3]
		[45, 12]

If the left slice index is 0, you can leave it out, and 0 is implied. Similarly, if the right slice index is the length of the list, you can leave it out.

		>>>a[:3]
		[23, 45, 12]
		>>> a[2:]
		[12, 67, 90]

To Copy a list - Do not specify any value on either side of the colon
  
		>>>b = a[:]
		>>> b
		[23, 45, 12, 67, 90]

Adding elements to a list

Difference between append and extend
Ans - 	Append() will add a single element to the end of the list.
	Extend() can add a list to a list

      	 >>> a
	[23, 45, 12, 67, 90]
	>>> a.extend(['hsdad','jagca',323,5346])
	>>> a
	[23, 45, 12, 67, 90, 'hsdad', 'jagca', 323, 5346]


If we try to pass a list to the append() function, it will add the whole list to the original list as a new element. It won't add the individual elements of the passed list to the main list as individual elements.

	>>> b
	[23, 45, 12, 67, 90] 	
	 >>> b.append([123,654,678])
	>>> b
	[23, 45, 12, 67, 90, [123, 654, 678]]

Whereas 

	>>>b
	[23, 45, 12, 67, 90]
	>>> b.extend([100,200,300])
	>>> b
	[23, 45, 12, 67, 90, 100, 200,300]


Insert() – To insert an element at a particular position in the list
		Insert(index, value to be inserted)
	
>>> a = [10, 20, 40, 50]
>>> a
[10, 20, 40, 50]
>>> a.insert(2,30)
>>> a
[10, 20, 30, 40, 50]










Searching elements in a List

1.	Count() - method returns the number of occurrences of a specific value in a list.

>>> a = [1,2,3,2,1,5,4,6,7,8,4]
>>> a.count(1)
2
>>> a.count(5)
1



2.	In Operator – to determine whether a particular element is resent in the list or not. It returns a true or false.

>>> a = [1,2,3,2,1,5,4,6,7,8,4]
>>> 1 in a
True
>>> 5 in a
True
>>> 10 in a
False
3.	Index() - To find the index number at which a particular element of the list is present

>>> a = [10, 20,30,40,50]
>>> a.index(10)
0
>>> a.index(30)
2
If the list has duplicate values then the index() method returns the first occurring index of the element.
			>>> a = [10, 20,30,40,50, 20,40]
			>>> a.index(20)
1
If the element is not found then index() raises an exception instead of returning any bogus value like -1.
