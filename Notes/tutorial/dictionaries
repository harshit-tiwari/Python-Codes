Dictionaries

Python dictionaries are optimized for retrieving the value when you know the key, but not the other way around.

			>>> d = {1:'a', 2:'b', 3:'c'}
>>> d
{1: 'a', 2: 'b', 3: 'c'}
>>> d[3] = 'asdf'
>>> d
{1: 'a', 2: 'b', 3: 'asdf'}
>>> len(d)
3
>>> d.update([{4,'d'}])
>>> d
{1: 'a', 2: 'b', 3: 'asdf', 4: 'd'}
>>> d[5] ='svgg'
>>> d
{1: 'a', 2: 'b', 3: 'asdf', 4: 'd', 5: 'svgg'}
>>> d[5]
'svgg'
Dictionaries can’t have duplicate keys. Assigning a value to an existing key will wipe out the old value.

>>> a = {1:'a',2:'b',3:'c',4:'d'}
>>> a
{1: 'a', 2: 'b', 3: 'c', 4: 'd'}
>>> a[4] = 'asd'
>>> a
{1: 'a', 2: 'b', 3: 'c', 4: 'asd'}

>>> a[5] ='e'
>>> a
{1: 'a', 2: 'b', 3: 'c', 4: 'asd', 5: 'e'}

There is no order in dictionaries. Keys are randomly placed.
Dictionaries can also have lists as values.

>>> b
{1: ['john', 'snow', 'robert', 'baratheon'], 2: ['a', 'b', 'c', 'd']}
>>> len(b)
2
>>> b[1]
['john', 'snow', 'robert', 'baratheon']
>>> b[2]
['a', 'b', 'c', 'd']
>>> b[1][0]     #the first bracket signifies the key and the second bracket signifies
                           the index of the list against the first key.
'john'
>>> b[1][3]
'baratheon'


	The len() function is used to find length of Lists and Sets only.


We can also use the IN operator for dictionaries but it can be used only for the keys.

>>> 2 in b
True
>>> 'john' in b
False



None
None is a special constant in Python. It is a null value. None is not the same as False. None is not 0. None is not an empty string. 
Comparing None to anything other than None will always return False. None is the only null value. It has its own datatype (NoneType). 
You can assign None to any variable, but you can not create other NoneType objects. All variables whose value is None are equal to 
each other.
